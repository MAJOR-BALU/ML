{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "93937dec-1dbd-4af7-9217-8a3392b4ee7c",
   "metadata": {
    "id": "93937dec-1dbd-4af7-9217-8a3392b4ee7c"
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "24a6c7d3-f6da-4148-b88f-bbfe20068411",
   "metadata": {
    "id": "24a6c7d3-f6da-4148-b88f-bbfe20068411"
   },
   "outputs": [],
   "source": [
    "import warnings\n",
    "warnings.filterwarnings('ignore')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "8f4f9db4-5e0f-4bab-9e1e-1479b0ea6a97",
   "metadata": {
    "id": "8f4f9db4-5e0f-4bab-9e1e-1479b0ea6a97"
   },
   "outputs": [],
   "source": [
    "df = pd.read_csv('titanic_train.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "2e41444e-b908-4760-9e69-66e1c2776360",
   "metadata": {
    "id": "2e41444e-b908-4760-9e69-66e1c2776360",
    "outputId": "4368e5ab-4176-4f98-e563-02d1c60085c2"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Braund, Mr. Owen Harris</td>\n",
       "      <td>male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>A/5 21171</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17599</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C85</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Heikkinen, Miss. Laina</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>STON/O2. 3101282</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>113803</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>C123</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Allen, Mr. William Henry</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>373450</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Survived  Pclass  \\\n",
       "0            1         0       3   \n",
       "1            2         1       1   \n",
       "2            3         1       3   \n",
       "3            4         1       1   \n",
       "4            5         0       3   \n",
       "\n",
       "                                                Name     Sex   Age  SibSp  \\\n",
       "0                            Braund, Mr. Owen Harris    male  22.0      1   \n",
       "1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
       "2                             Heikkinen, Miss. Laina  female  26.0      0   \n",
       "3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n",
       "4                           Allen, Mr. William Henry    male  35.0      0   \n",
       "\n",
       "   Parch            Ticket     Fare Cabin Embarked  \n",
       "0      0         A/5 21171   7.2500   NaN        S  \n",
       "1      0          PC 17599  71.2833   C85        C  \n",
       "2      0  STON/O2. 3101282   7.9250   NaN        S  \n",
       "3      0            113803  53.1000  C123        S  \n",
       "4      0            373450   8.0500   NaN        S  "
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "6eeb39ee-65c9-47a7-ba59-252882543dd0",
   "metadata": {
    "id": "6eeb39ee-65c9-47a7-ba59-252882543dd0",
    "outputId": "7d025581-dcdb-478c-84b9-ad0105f19750"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>886</th>\n",
       "      <td>887</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>Montvila, Rev. Juozas</td>\n",
       "      <td>male</td>\n",
       "      <td>27.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>211536</td>\n",
       "      <td>13.00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>887</th>\n",
       "      <td>888</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Graham, Miss. Margaret Edith</td>\n",
       "      <td>female</td>\n",
       "      <td>19.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>112053</td>\n",
       "      <td>30.00</td>\n",
       "      <td>B42</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>888</th>\n",
       "      <td>889</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Johnston, Miss. Catherine Helen \"Carrie\"</td>\n",
       "      <td>female</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>W./C. 6607</td>\n",
       "      <td>23.45</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>889</th>\n",
       "      <td>890</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Behr, Mr. Karl Howell</td>\n",
       "      <td>male</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>111369</td>\n",
       "      <td>30.00</td>\n",
       "      <td>C148</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>890</th>\n",
       "      <td>891</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Dooley, Mr. Patrick</td>\n",
       "      <td>male</td>\n",
       "      <td>32.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>370376</td>\n",
       "      <td>7.75</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Q</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     PassengerId  Survived  Pclass                                      Name  \\\n",
       "886          887         0       2                     Montvila, Rev. Juozas   \n",
       "887          888         1       1              Graham, Miss. Margaret Edith   \n",
       "888          889         0       3  Johnston, Miss. Catherine Helen \"Carrie\"   \n",
       "889          890         1       1                     Behr, Mr. Karl Howell   \n",
       "890          891         0       3                       Dooley, Mr. Patrick   \n",
       "\n",
       "        Sex   Age  SibSp  Parch      Ticket   Fare Cabin Embarked  \n",
       "886    male  27.0      0      0      211536  13.00   NaN        S  \n",
       "887  female  19.0      0      0      112053  30.00   B42        S  \n",
       "888  female   NaN      1      2  W./C. 6607  23.45   NaN        S  \n",
       "889    male  26.0      0      0      111369  30.00  C148        C  \n",
       "890    male  32.0      0      0      370376   7.75   NaN        Q  "
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "814171e8-89be-421c-9561-3b41522d7d70",
   "metadata": {
    "id": "814171e8-89be-421c-9561-3b41522d7d70",
    "outputId": "cb40e6bd-2da1-4a72-d990-9a2700d8d558"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(891, 12)"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "9f6651a1-1cc4-4f67-83db-696219468fc5",
   "metadata": {
    "id": "9f6651a1-1cc4-4f67-83db-696219468fc5",
    "outputId": "084f57ac-bc74-470b-8e32-ca8d72cb4d16"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['PassengerId', 'Survived', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp',\n",
       "       'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "e7ea2aaf-dd51-4ec0-a831-f63160398742",
   "metadata": {
    "id": "e7ea2aaf-dd51-4ec0-a831-f63160398742",
    "outputId": "2d6ec5ff-d0f6-4a77-8a16-665183dabcd5"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.duplicated().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "6aa054dd-74a1-4c00-917d-b57c24f99786",
   "metadata": {
    "id": "6aa054dd-74a1-4c00-917d-b57c24f99786",
    "outputId": "5d067d96-cf68-4a41-af2f-31fa94df0a52"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "PassengerId      0\n",
       "Survived         0\n",
       "Pclass           0\n",
       "Name             0\n",
       "Sex              0\n",
       "Age            177\n",
       "SibSp            0\n",
       "Parch            0\n",
       "Ticket           0\n",
       "Fare             0\n",
       "Cabin          687\n",
       "Embarked         2\n",
       "dtype: int64"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "58333569-dea2-4aa8-8651-b6b98cfab7b4",
   "metadata": {
    "id": "58333569-dea2-4aa8-8651-b6b98cfab7b4"
   },
   "outputs": [],
   "source": [
    "df = df.drop(['Cabin', 'PassengerId', 'Name', 'Ticket'], axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "21e0add5-e0e0-41e3-a987-df8b0c4c44d7",
   "metadata": {
    "id": "21e0add5-e0e0-41e3-a987-df8b0c4c44d7",
    "outputId": "16d3bbf8-8a08-47ef-c7c4-2fb5e229e305"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "111"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.duplicated().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "7b0196c7-6889-4193-b31e-6eac2183b70f",
   "metadata": {
    "id": "7b0196c7-6889-4193-b31e-6eac2183b70f"
   },
   "outputs": [],
   "source": [
    "df = df.drop_duplicates()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "ef05f35e-bdff-4a89-944f-120713ec092a",
   "metadata": {
    "id": "ef05f35e-bdff-4a89-944f-120713ec092a",
    "outputId": "f469f8fe-0f0f-4474-d1df-91237fbe0e6f"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Survived      0\n",
       "Pclass        0\n",
       "Sex           0\n",
       "Age         104\n",
       "SibSp         0\n",
       "Parch         0\n",
       "Fare          0\n",
       "Embarked      2\n",
       "dtype: int64"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "a5e3b7c3-0626-488d-bd5b-9b97b665b72c",
   "metadata": {
    "id": "a5e3b7c3-0626-488d-bd5b-9b97b665b72c",
    "outputId": "3f2dec1d-46f9-4dcd-bfff-40a23aad9d8a"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Index: 780 entries, 0 to 890\n",
      "Data columns (total 8 columns):\n",
      " #   Column    Non-Null Count  Dtype  \n",
      "---  ------    --------------  -----  \n",
      " 0   Survived  780 non-null    int64  \n",
      " 1   Pclass    780 non-null    int64  \n",
      " 2   Sex       780 non-null    object \n",
      " 3   Age       676 non-null    float64\n",
      " 4   SibSp     780 non-null    int64  \n",
      " 5   Parch     780 non-null    int64  \n",
      " 6   Fare      780 non-null    float64\n",
      " 7   Embarked  778 non-null    object \n",
      "dtypes: float64(2), int64(4), object(2)\n",
      "memory usage: 54.8+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "865c8afd-1e42-4812-af2b-9d76e52e56c9",
   "metadata": {
    "id": "865c8afd-1e42-4812-af2b-9d76e52e56c9",
    "outputId": "73a25120-cabd-42ec-f9d1-f4b4213559a5"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>780.000000</td>\n",
       "      <td>780.000000</td>\n",
       "      <td>676.000000</td>\n",
       "      <td>780.000000</td>\n",
       "      <td>780.000000</td>\n",
       "      <td>780.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>0.412821</td>\n",
       "      <td>2.246154</td>\n",
       "      <td>29.812751</td>\n",
       "      <td>0.525641</td>\n",
       "      <td>0.417949</td>\n",
       "      <td>34.829108</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.492657</td>\n",
       "      <td>0.854452</td>\n",
       "      <td>14.727098</td>\n",
       "      <td>0.988046</td>\n",
       "      <td>0.838536</td>\n",
       "      <td>52.263440</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.420000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>20.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>8.050000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>28.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>15.950000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>39.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>34.375000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>80.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>512.329200</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Survived      Pclass         Age       SibSp       Parch        Fare\n",
       "count  780.000000  780.000000  676.000000  780.000000  780.000000  780.000000\n",
       "mean     0.412821    2.246154   29.812751    0.525641    0.417949   34.829108\n",
       "std      0.492657    0.854452   14.727098    0.988046    0.838536   52.263440\n",
       "min      0.000000    1.000000    0.420000    0.000000    0.000000    0.000000\n",
       "25%      0.000000    1.000000   20.000000    0.000000    0.000000    8.050000\n",
       "50%      0.000000    3.000000   28.000000    0.000000    0.000000   15.950000\n",
       "75%      1.000000    3.000000   39.000000    1.000000    1.000000   34.375000\n",
       "max      1.000000    3.000000   80.000000    8.000000    6.000000  512.329200"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "dc591d2f-70ee-4eb7-99f0-a3f844ab7b29",
   "metadata": {
    "id": "dc591d2f-70ee-4eb7-99f0-a3f844ab7b29",
    "outputId": "2488afd6-b870-4889-e6fa-f98260f539ff"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Survived      2\n",
       "Pclass        3\n",
       "Sex           2\n",
       "Age          88\n",
       "SibSp         7\n",
       "Parch         7\n",
       "Fare        248\n",
       "Embarked      3\n",
       "dtype: int64"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.nunique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "b9034a98-ad57-4e2f-877e-c853163df0f5",
   "metadata": {
    "id": "b9034a98-ad57-4e2f-877e-c853163df0f5"
   },
   "outputs": [],
   "source": [
    "df['Embarked'] = df['Embarked'].fillna(df['Embarked'].mode()[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "11ad123e-1f6e-43e0-aeda-397fe32e2883",
   "metadata": {
    "id": "11ad123e-1f6e-43e0-aeda-397fe32e2883"
   },
   "outputs": [],
   "source": [
    "df['Age'] = df['Age'].fillna(df['Age'].mean())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "8f628921-7ffc-45fc-bc20-7fed84dd36f5",
   "metadata": {
    "id": "8f628921-7ffc-45fc-bc20-7fed84dd36f5",
    "outputId": "40504149-b331-4472-9ee3-ea317f738873"
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1500x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(15,6))\n",
    "sns.countplot(x = df['Survived'], data = df, palette='hls')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "9ee6b789-f292-445d-92c5-291955470c5f",
   "metadata": {
    "id": "9ee6b789-f292-445d-92c5-291955470c5f",
    "outputId": "870c1d64-9190-4116-85cf-a758689638d6"
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 600x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "survived_counts = df['Survived'].value_counts()\n",
    "\n",
    "plt.figure(figsize=(6, 6))\n",
    "plt.pie(survived_counts, labels=survived_counts.index, autopct='%1.1f%%', startangle=90)\n",
    "plt.title('Survival Distribution')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "839f8b43-43d4-4ac3-8269-42e398712391",
   "metadata": {
    "id": "839f8b43-43d4-4ac3-8269-42e398712391",
    "outputId": "03f758d9-0d04-4ba4-fc40-c9695139dbbf"
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1500x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(15,6))\n",
    "sns.countplot(x = df['Pclass'], data = df, palette='hls')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "749eb95a-c48e-4b16-915c-8bf49a721e72",
   "metadata": {
    "id": "749eb95a-c48e-4b16-915c-8bf49a721e72",
    "outputId": "d73ba111-e2d3-4fd9-8929-4ebfa6989bb2"
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 600x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "pclass_counts = df['Pclass'].value_counts()\n",
    "\n",
    "plt.figure(figsize=(6, 6))\n",
    "plt.pie(pclass_counts, labels=pclass_counts.index, autopct='%1.1f%%', startangle=90)\n",
    "plt.title('Passenger Class Distribution')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "12922066-6e69-4b22-be70-74ddab4559f8",
   "metadata": {
    "id": "12922066-6e69-4b22-be70-74ddab4559f8",
    "outputId": "d13ebfee-e5b3-43a2-d278-89ec0919467f"
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1500x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(15,6))\n",
    "sns.countplot(x = df['Sex'], data = df, palette='hls')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "b087269a-fda2-4871-b48a-58c9a6b47063",
   "metadata": {
    "id": "b087269a-fda2-4871-b48a-58c9a6b47063",
    "outputId": "eab68369-9253-4106-e02a-5a82115d468c"
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 600x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sex_counts = df['Sex'].value_counts()\n",
    "\n",
    "plt.figure(figsize=(6, 6))\n",
    "plt.pie(sex_counts, labels=sex_counts.index, autopct='%1.1f%%', startangle=90)\n",
    "plt.title('Gender Distribution')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "d94e8f5e-f693-40a1-908b-8f006ba0da1e",
   "metadata": {
    "id": "d94e8f5e-f693-40a1-908b-8f006ba0da1e",
    "outputId": "f61f17bc-c5bd-4756-b468-049f8b223534"
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(8, 6))\n",
    "plt.hist(df['Age'], bins=10, color='skyblue', edgecolor='black')\n",
    "plt.title('Histogram of Age')\n",
    "plt.xlabel('Values')\n",
    "plt.ylabel('Frequency')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "5ada5def-51f4-45f8-b080-3324b174befd",
   "metadata": {
    "id": "5ada5def-51f4-45f8-b080-3324b174befd",
    "outputId": "47ed9661-13af-4116-d4d6-33d2b20fdf0c"
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAArcAAAIjCAYAAAAZajMiAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjguNCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8fJSN1AAAACXBIWXMAAA9hAAAPYQGoP6dpAAA+0klEQVR4nO3df3zP9f7/8ft79svsl2F7E0M1Ib9qwjv6xTI/cohz+jVC6yhnyM/K58jPPk0qoRZ1qk2npJxz9EPIQnQyZBEhptTEfiTZbNrv1/ePPt7f3o1itr23p9v1cnld2vv5fL5fr8dzz3S59/J8v942y7IsAQAAAAbwcHcBAAAAQGUh3AIAAMAYhFsAAAAYg3ALAAAAYxBuAQAAYAzCLQAAAIxBuAUAAIAxCLcAAAAwBuEWAAAAxiDcArhktGjRQiNGjHB3GcZ76qmndPnll6tOnTrq1KmTu8sBcIkh3AKolZKSkmSz2bRjx46z9t98881q167dRV9n9erVmjlz5kWf51Kxbt06Pfzww+revbsSExP1xBNPnHPsiBEjZLPZznqsXbu2GqsGYBJPdxcAANXlwIED8vC4sP+nX716tRISEgi452nDhg3y8PDQK6+8Im9v7z8c7+Pjo5dffrlce8eOHauiPACXAMItgEuGj4+Pu0u4YPn5+apXr567yzhv2dnZqlu37nkFW0ny9PTU0KFDK72O2vZ7A1B52JYA4JLx2z23xcXFmjVrliIiIuTr66sGDRqoR48eSk5OlvTLX5snJCRIkstfmZ+Rn5+vSZMmqVmzZvLx8dFVV12lp59+WpZluVz3559/1rhx49SwYUMFBAToT3/6k44ePSqbzeZyR3jmzJmy2Wzat2+f7rnnHtWvX189evSQJO3evVsjRozQ5ZdfLl9fX9ntdt1333368ccfXa515hwHDx7U0KFDFRQUpEaNGumxxx6TZVk6cuSIBg4cqMDAQNntdj3zzDPn9bsrKSnRnDlzdMUVV8jHx0ctWrTQ//zP/6iwsNA5xmazKTExUfn5+c7fVVJS0nmd/2w++eQT/eUvf1F4eLh8fHzUrFkzTZgwQT///LPLuBEjRsjf319ff/21+vXrp4CAAMXExEiSysrKtGDBAl199dXy9fVVWFiYHnjgAf30008VrgtAzcadWwC1Wk5Ojo4fP16uvbi4+A/fO3PmTMXHx+v+++9Xly5dlJubqx07dujzzz/XrbfeqgceeEDHjh1TcnKy/vnPf7q817Is/elPf9LGjRsVGxurTp066cMPP9SUKVN09OhRPfvss86xI0aM0Ntvv61hw4apW7du2rRpk/r373/Ouv7yl78oIiJCTzzxhDMoJycn65tvvtHIkSNlt9u1d+9evfTSS9q7d6+2bt3qErol6c4771SbNm00d+5cffDBB3r88ccVEhKiF198UT179tSTTz6pN954Q5MnT9Z1112nG2+88Xd/V/fff7+WLl2qP//5z5o0aZK2bdum+Ph47d+/XytXrpQk/fOf/9RLL72k7du3O7caXH/99X+4Dr9dPy8vLwUFBWnFihU6ffq0Ro8erQYNGmj79u167rnn9P3332vFihUu7ykpKVF0dLR69Oihp59+Wn5+fpKkBx54QElJSRo5cqTGjRunw4cP6/nnn9fOnTv16aefysvL6w/rA1DLWABQCyUmJlqSfve4+uqrXd7TvHlza/jw4c7XHTt2tPr37/+714mLi7PO9p/Kd955x5JkPf744y7tf/7zny2bzWYdOnTIsizLSk1NtSRZ48ePdxk3YsQIS5I1Y8YMZ9uMGTMsSdbdd99d7nqnT58u1/bmm29akqzNmzeXO8eoUaOcbSUlJVbTpk0tm81mzZ0719n+008/WXXr1nX5nZzNrl27LEnW/fff79I+efJkS5K1YcMGZ9vw4cOtevXq/e75fj32bOt20003nXPO8fHxls1ms7777rty53n00Uddxn7yySeWJOuNN95waV+7du1Z2wGYgW0JAGq1hIQEJScnlzs6dOjwh+8NDg7W3r17lZaWdsHXXb16terUqaNx48a5tE+aNEmWZWnNmjWS5PzU/9/+9jeXcWPHjj3nuR988MFybXXr1nX+XFBQoOPHj6tbt26SpM8//7zc+Pvvv9/5c506ddS5c2dZlqXY2Fhne3BwsK666ip9880356xF+mWukjRx4kSX9kmTJkmSPvjgg999/+/x9fUtt3Zntkr8es75+fk6fvy4rr/+elmWpZ07d5Y71+jRo11er1ixQkFBQbr11lt1/Phx5xEZGSl/f39t3LixwnUDqLnYlgCgVuvSpYs6d+5crr1+/fpn3a7wa7Nnz9bAgQPVqlUrtWvXTn369NGwYcPOKxh/9913atKkiQICAlza27Rp4+w/808PDw+1bNnSZdyVV155znP/dqwknThxQrNmzdLy5cuVnZ3t0peTk1NufHh4uMvroKAg+fr6qmHDhuXaf7tv97fOzOG3NdvtdgUHBzvnWhF16tRRVFTUWfvS09M1ffp0vffee+X2yP52zp6enmratKlLW1pamnJychQaGnrW8//29wjADIRbAJesG2+8UV9//bXeffddrVu3Ti+//LKeffZZLVmyxOXOZ3X79R3LM+644w5t2bJFU6ZMUadOneTv76+ysjL16dNHZWVl5cbXqVPnvNoklfsA3Ln8dl9vVSotLdWtt96qEydO6JFHHlHr1q1Vr149HT16VCNGjCg3Zx8fn3KPeSsrK1NoaKjeeOONs16jUaNGVVY/APch3AK4pIWEhGjkyJEaOXKk8vLydOONN2rmzJnOcHuuQNe8eXN99NFHOnXqlMvd26+++srZf+afZWVlOnz4sCIiIpzjDh06dN41/vTTT1q/fr1mzZql6dOnO9srsp2iIs7MIS0tzXlnWpKysrJ08uRJ51wr0549e3Tw4EEtXbpU9957r7P9zJMszscVV1yhjz76SN27dz/r/zAAMBN7bgFcsn771/H+/v668sorXR5vdeZZqSdPnnQZ269fP5WWlur55593aX/22Wdls9nUt29fSVJ0dLQk6YUXXnAZ99xzz513nWfuuP72DuuCBQvO+xwXo1+/fme93vz58yXpd5/8UFFnm7NlWVq4cOF5n+OOO+5QaWmp5syZU66vpKSk3JoCMAN3bgFcstq2baubb75ZkZGRCgkJ0Y4dO/Svf/1LY8aMcY6JjIyUJI0bN07R0dGqU6eO7rrrLg0YMEC33HKL/v73v+vbb79Vx44dtW7dOr377rsaP368rrjiCuf7hwwZogULFujHH390Pgrs4MGDks7vr/oDAwN14403at68eSouLtZll12mdevW6fDhw1XwWymvY8eOGj58uF566SWdPHlSN910k7Zv366lS5dq0KBBuuWWWyr9mq1bt9YVV1yhyZMn6+jRowoMDNS///3vC3o+7U033aQHHnhA8fHx2rVrl3r37i0vLy+lpaVpxYoVWrhwof785z9Xeu0A3ItwC+CSNW7cOL333ntat26dCgsL1bx5cz3++OOaMmWKc8zgwYM1duxYLV++XK+//rosy9Jdd90lDw8Pvffee5o+fbreeustJSYmqkWL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",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(8, 6))\n",
    "plt.hist(df['Fare'], bins=10, color='skyblue', edgecolor='black')\n",
    "plt.title('Histogram of Fare')\n",
    "plt.xlabel('Values')\n",
    "plt.ylabel('Frequency')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "180a9647-dcbb-4e3b-8399-71da96a4ff4d",
   "metadata": {
    "id": "180a9647-dcbb-4e3b-8399-71da96a4ff4d"
   },
   "outputs": [],
   "source": [
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "e791275a-020e-4167-af89-2be32e866aa9",
   "metadata": {
    "id": "e791275a-020e-4167-af89-2be32e866aa9",
    "outputId": "2340ca0c-689a-464f-fc37-79658b13906b"
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(8, 6))\n",
    "sns.boxplot(x = df['Age'], data = df, palette = 'hls')\n",
    "plt.title('Boxplot of Age')\n",
    "plt.xlabel('Values')\n",
    "plt.ylabel('Y')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "8e4dba4a-096e-462b-b6ba-6016a8ea8225",
   "metadata": {
    "id": "8e4dba4a-096e-462b-b6ba-6016a8ea8225",
    "outputId": "1195ee94-7577-4cfc-afa6-f3ddb8e5e7d9"
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(8, 6))\n",
    "sns.boxplot(x = df['Fare'], data = df, palette = 'hls')\n",
    "plt.title('Boxplot of Fare')\n",
    "plt.xlabel('Values')\n",
    "plt.ylabel('Y')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "3b3e964f-826f-44c2-b965-5d0aa8747bc3",
   "metadata": {
    "id": "3b3e964f-826f-44c2-b965-5d0aa8747bc3"
   },
   "outputs": [],
   "source": [
    "df = pd.get_dummies(df, columns=['Sex', 'Embarked'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "d56ecede-f24e-4180-9753-89453243d05d",
   "metadata": {
    "id": "d56ecede-f24e-4180-9753-89453243d05d",
    "outputId": "68ea92c0-2dd8-4352-d1e1-6914b8be5dba"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Sex_female</th>\n",
       "      <th>Sex_male</th>\n",
       "      <th>Embarked_C</th>\n",
       "      <th>Embarked_Q</th>\n",
       "      <th>Embarked_S</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>22.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>38.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>26.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>35.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>35.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>885</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>39.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>29.1250</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>887</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>19.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>30.0000</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>888</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>29.812751</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>23.4500</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>889</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>26.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>30.0000</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>890</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>32.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7.7500</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>780 rows × 11 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Survived  Pclass        Age  SibSp  Parch     Fare  Sex_female  Sex_male  \\\n",
       "0           0       3  22.000000      1      0   7.2500       False      True   \n",
       "1           1       1  38.000000      1      0  71.2833        True     False   \n",
       "2           1       3  26.000000      0      0   7.9250        True     False   \n",
       "3           1       1  35.000000      1      0  53.1000        True     False   \n",
       "4           0       3  35.000000      0      0   8.0500       False      True   \n",
       "..        ...     ...        ...    ...    ...      ...         ...       ...   \n",
       "885         0       3  39.000000      0      5  29.1250        True     False   \n",
       "887         1       1  19.000000      0      0  30.0000        True     False   \n",
       "888         0       3  29.812751      1      2  23.4500        True     False   \n",
       "889         1       1  26.000000      0      0  30.0000       False      True   \n",
       "890         0       3  32.000000      0      0   7.7500       False      True   \n",
       "\n",
       "     Embarked_C  Embarked_Q  Embarked_S  \n",
       "0         False       False        True  \n",
       "1          True       False       False  \n",
       "2         False       False        True  \n",
       "3         False       False        True  \n",
       "4         False       False        True  \n",
       "..          ...         ...         ...  \n",
       "885       False        True       False  \n",
       "887       False       False        True  \n",
       "888       False       False        True  \n",
       "889        True       False       False  \n",
       "890       False        True       False  \n",
       "\n",
       "[780 rows x 11 columns]"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "4853c2c2-a763-4b11-be52-8b959abbd1ec",
   "metadata": {
    "id": "4853c2c2-a763-4b11-be52-8b959abbd1ec"
   },
   "outputs": [],
   "source": [
    "X = df.drop('Survived', axis=1)\n",
    "y = df['Survived']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "20353c66-4d3f-4a45-9f8e-3ae38918e58b",
   "metadata": {
    "id": "20353c66-4d3f-4a45-9f8e-3ae38918e58b"
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "21d69ee6-1301-452f-ad14-f6e38d6debdf",
   "metadata": {
    "id": "21d69ee6-1301-452f-ad14-f6e38d6debdf"
   },
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, stratify = y,\n",
    "                                                    random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "3a83b105-89a4-4cce-908f-2a39deaf5b6b",
   "metadata": {
    "id": "3a83b105-89a4-4cce-908f-2a39deaf5b6b"
   },
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LogisticRegression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "3fd956da-5140-4121-b68b-1385887c83ab",
   "metadata": {
    "id": "3fd956da-5140-4121-b68b-1385887c83ab",
    "outputId": "f3b86a3c-f912-4211-84e7-de524595eca5"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-2 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: black;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-2 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-2 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-2 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: block;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"▸\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"▾\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-2 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-2 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-2 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-2 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-2 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 1ex;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-2 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-2 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;LogisticRegression<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.4/modules/generated/sklearn.linear_model.LogisticRegression.html\">?<span>Documentation for LogisticRegression</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>LogisticRegression()</pre></div> </div></div></div></div>"
      ],
      "text/plain": [
       "LogisticRegression()"
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "logreg = LogisticRegression()\n",
    "logreg.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "d3b1a353-0a03-4380-9dd3-740ed92ac659",
   "metadata": {
    "id": "d3b1a353-0a03-4380-9dd3-740ed92ac659"
   },
   "outputs": [],
   "source": [
    "y_pred = logreg.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "33181de6-8674-4e54-aae9-b1083809d385",
   "metadata": {
    "id": "33181de6-8674-4e54-aae9-b1083809d385"
   },
   "outputs": [],
   "source": [
    "from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix, classification_report, roc_curve, precision_recall_curve, auc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "0283e357-1887-4d13-9a7a-5b504b5fe237",
   "metadata": {
    "id": "0283e357-1887-4d13-9a7a-5b504b5fe237"
   },
   "outputs": [],
   "source": [
    "# Precision: Precision is the fraction of true positive predictions out of all positive predictions made by the model. It measures the accuracy of the positive predictions made by the model. The formula for precision is:\n",
    "\n",
    "# Precision = TP / (TP + FP)\n",
    "\n",
    "# Recall: Recall is the fraction of true positive predictions out of all actual positive examples. It measures the ability of the model to find all positive examples. The formula for recall is:\n",
    "\n",
    "# Recall = TP / (TP + FN)\n",
    "\n",
    "# F1 score: F1 score is the harmonic mean of precision and recall, which provides a balance between precision and recall. It is useful when the class distribution is uneven. The formula for F1 score is:\n",
    "\n",
    "# F1 Score = 2 * (Precision * Recall) / (Precision + Recall)\n",
    "\n",
    "# Support: Support is the number of actual instances of each class in the dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "e22e0a1c-b9c1-4902-bada-3adbd74d920f",
   "metadata": {
    "id": "e22e0a1c-b9c1-4902-bada-3adbd74d920f",
    "outputId": "deb50da5-4005-49f8-93b0-3bd775749363"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.7948717948717948\n",
      "0.75\n",
      "0.75\n",
      "0.75\n",
      "[[76 16]\n",
      " [16 48]]\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.83      0.83      0.83        92\n",
      "           1       0.75      0.75      0.75        64\n",
      "\n",
      "    accuracy                           0.79       156\n",
      "   macro avg       0.79      0.79      0.79       156\n",
      "weighted avg       0.79      0.79      0.79       156\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# calculate accuracy\n",
    "accuracy = accuracy_score(y_test, y_pred)\n",
    "\n",
    "print(accuracy)\n",
    "\n",
    "# calculate precision\n",
    "precision = precision_score(y_test, y_pred)\n",
    "\n",
    "print(precision)\n",
    "\n",
    "# calculate recall\n",
    "recall = recall_score(y_test, y_pred)\n",
    "\n",
    "print(recall)\n",
    "\n",
    "# calculate F1 score\n",
    "f1 = f1_score(y_test, y_pred)\n",
    "\n",
    "print(f1)\n",
    "\n",
    "# calculate confusion matrix\n",
    "cm = confusion_matrix(y_test, y_pred)\n",
    "\n",
    "print(cm)\n",
    "\n",
    "y_prob = logreg.predict_proba(X_test)\n",
    "\n",
    "cr = classification_report(y_test, y_pred)\n",
    "print(cr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "id": "3a8f29b7-7e05-47c2-898b-d051fccea0c9",
   "metadata": {
    "id": "3a8f29b7-7e05-47c2-898b-d051fccea0c9"
   },
   "outputs": [
    {
     "ename": "ModuleNotFoundError",
     "evalue": "No module named 'scikitplot'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[82], line 1\u001b[0m\n\u001b[1;32m----> 1\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mscikitplot\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mmetrics\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m plot_confusion_matrix, plot_roc\n",
      "\u001b[1;31mModuleNotFoundError\u001b[0m: No module named 'scikitplot'"
     ]
    }
   ],
   "source": [
    "from scikitplot.metrics import plot_confusion_matrix, plot_roc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5c5996f0-8097-4e07-9a33-cd485f4a3bf7",
   "metadata": {
    "id": "5c5996f0-8097-4e07-9a33-cd485f4a3bf7",
    "outputId": "30f2d57e-79d6-416e-d6ff-b7c669b82c0a"
   },
   "outputs": [],
   "source": [
    "plot_confusion_matrix(y_test, y_pred, cmap= 'YlGnBu')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "65e01035-b75f-4447-9cbd-704059b5c8d3",
   "metadata": {
    "id": "65e01035-b75f-4447-9cbd-704059b5c8d3"
   },
   "outputs": [],
   "source": [
    "# The Area Under the ROC Curve (AUC-ROC) is a measure of how well a\n",
    "# classification model can distinguish between two classes, usually positive\n",
    "# and negative. The ROC (Receiver Operating Characteristic) curve is a\n",
    "# graphical representation of the performance of a binary classifier, which\n",
    "# plots the true positive rate (TPR) against the false positive rate (FPR) at\n",
    "# various threshold settings.\n",
    "\n",
    "# To generate a ROC curve, the classifier is first trained on a dataset, and\n",
    "# then the predicted probabilities or scores of the positive class are\n",
    "#calculated for each example in the validation set. These predicted scores are\n",
    "#then used to plot the ROC curve by varying the threshold value used to make the final classification decision.\n",
    "\n",
    "# The ROC curve shows the trade-off between the true positive rate (TPR) and\n",
    "# the false positive rate (FPR) at different threshold values. The TPR is the\n",
    "# proportion of positive examples that are correctly classified as positive,\n",
    "# while the FPR is the proportion of negative examples that are incorrectly\n",
    "# classified as positive.\n",
    "\n",
    "# A perfect classifier would have an ROC curve that passes through the top-left\n",
    "# corner of the plot, indicating that it has a TPR of 1 and an FPR of 0 for all\n",
    "# threshold values. In contrast, a classifier that performs no better than\n",
    "# random guessing would have an ROC curve that is a diagonal line with a slope\n",
    "# of 1.\n",
    "\n",
    "# The AUC-ROC is calculated as the area under the ROC curve, which ranges from\n",
    "# 0 to 1. A higher AUC-ROC indicates better performance, with a perfect\n",
    "# classifier having an AUC-ROC of 1.\n",
    "\n",
    "# Overall, the ROC curve and AUC-ROC are useful tools for evaluating the\n",
    "# performance of binary classifiers, as they provide a graphical representation\n",
    "# of the trade-off between the true positive rate and false positive rate at\n",
    "#different threshold values, and a quantitative measure of the overall\n",
    "# performance of the classifier."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bc22a0b8-0d01-4bbe-9e7e-c2f9c2a305f0",
   "metadata": {
    "id": "bc22a0b8-0d01-4bbe-9e7e-c2f9c2a305f0",
    "outputId": "343091f0-80c2-4141-f05e-1d2ffc4385c0"
   },
   "outputs": [],
   "source": [
    "plot_roc(y_test, y_prob, plot_macro= False, plot_micro= False, cmap= 'summer')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1af04545-1e5e-4fbc-a5ee-dee582a148c8",
   "metadata": {
    "id": "1af04545-1e5e-4fbc-a5ee-dee582a148c8"
   },
   "source": [
    "Guide to AUC ROC Curve in Machine Learning: What Is Specificity? Introduction You’ve built your machine learning model – so what’s next? You need to evaluate and validate how good (or bad) it is, so you can decide whether to implement it. That’s where the AUC-ROC curve comes in.\n",
    "\n",
    "The name might be a mouthful, but it is just saying that we are calculating the “Area Under the Curve” (AUC) of the “Receiver Operating Characteristic” (ROC). Confused? I feel you! I have been in your shoes. But don’t worry, we will see what these terms mean in detail, and everything will be a piece of cake!\n",
    "\n",
    "For now, just know that the AUC-ROC curve helps us visualize how well our machine learning classifier performs. Although it works only for binary classification problems, we will see how we can extend it to evaluate multi-class classification problems.\n",
    "\n",
    "We’ll also cover topics like sensitivity and specificity since these are key topics behind the AUC-ROC curve (or ROC AUC curve in machine learning).\n",
    "\n",
    "I suggest going through the article on Confusion Matrix as it will introduce some important terms we will use in this article.\n",
    "\n",
    "Table of contents Introduction What are Sensitivity and Specificity? Probability of Predictions What is the AUC-ROC Curve? How Does the AUC-ROC Curve Work? Understanding the AUC-ROC Curve in Python AUC-ROC Curve for Multi-Class Classification Conclusion Frequently Asked Questions What are Sensitivity and Specificity? This is what a confusion matrix looks like:\n",
    "\n",
    "Sensitivity / True Positive Rate / Recall Sensitivity tells us what proportion of the positive class got correctly classified. A simple example would be determining what proportion of the actual sick people were correctly detected by the model.\n",
    "\n",
    "Sensitivity formula:\n",
    "\n",
    "False Negative Rate False Negative Rate (FNR) tells us what proportion of the positive class got incorrectly classified by the classifier. A higher TPR and a lower FNR are desirable since we want to classify the positive class correctly.\n",
    "\n",
    "False Negative Rate formula:\n",
    "\n",
    "Specificity / True Negative Rate Specificity tells us what proportion of the negative class got correctly classified. Taking the same example as in Sensitivity, Specificity would mean determining the proportion of healthy people who were correctly identified by the model.\n",
    "\n",
    "Specificity formula:\n",
    "\n",
    "False Positive Rate FPR tells us what proportion of the negative class got incorrectly classified by the classifier. A higher TNR and a lower FPR are desirable since we want to classify the negative class correctly.\n",
    "\n",
    "False Positive Rate formula:\n",
    "\n",
    "Out of these metrics, Sensitivity and Specificity are perhaps the most important, and we will see later on how these are used to build an evaluation metric. But before that, let’s understand why the probability of prediction is better than predicting the target class directly.\n",
    "\n",
    "Probability of Predictions A machine learning classification model can be used to directly predict the data point’s actual class or predict its probability of belonging to different classes. The latter gives us more control over the result. We can determine our own threshold to interpret the result of the classifier. This is sometimes more prudent than just building a completely new model!\n",
    "\n",
    "Setting different thresholds for classifying positive classes for data points will inadvertently change the Sensitivity and Specificity of the model. And one of these thresholds will probably give a better result than the others, depending on whether we are aiming to lower the number of False Negatives or False Positives.\n",
    "\n",
    "Have a look at the table below:\n",
    "\n",
    "The metrics change with the changing threshold values. We can generate different confusion matrices and compare the various metrics that we discussed in the previous section. But that would not be a prudent thing to do. Instead, we can plot roc curves between some of these metrics to quickly visualize which threshold is giving us a better result.\n",
    "\n",
    "The AUC-ROC curve solves just that problem!\n",
    "\n",
    "What is the AUC-ROC Curve? You might have come across the terms ROC and AUC associated with artificial intelligence, deep learning, and convolutional neural networks (CNNs). So what exactly are they?\n",
    "\n",
    "An ROC curve, or receiver operating characteristic curve, is like a graph that shows how well a classification model performs. It helps us see how the model makes decisions at different levels of certainty. The curve has two lines: one for how often the model correctly identifies positive cases (true positives) and another for how often it mistakenly identifies negative cases as positive (false positives). By looking at this graph, we can understand how good the model is and choose the threshold that gives us the right balance between correct and incorrect predictions.\n",
    "\n",
    "The Receiver Operator Characteristic (ROC) curve is an evaluation metric for binary classification problems. It is a probability curve that plots the TPR against FPR at various threshold values and essentially separates the ‘signal’ from the ‘noise.’ In other words, it shows the performance of a classification model at all classification thresholds. The Area Under the Curve (AUC) is the measure of the ability of a binary classifier to distinguish between classes and is used as a summary of the ROC curve.\n",
    "\n",
    "The higher the AUC, the better the model’s performance at distinguishing between the positive and negative classes.\n",
    "\n",
    "When AUC = 1, the classifier can correctly distinguish between all the Positive and the Negative class points. If, however, the AUC had been 0, then the classifier would predict all Negatives as Positives and all Positives as Negatives.\n",
    "\n",
    "When 0.5<AUC<1, there is a high chance that the classifier will be able to distinguish the positive class values from the negative ones. This is so because the classifier is able to detect more numbers of True positives and True negatives than False negatives and False positives.\n",
    "\n",
    "When AUC=0.5, then the classifier is not able to distinguish between Positive and Negative class points. Meaning that the classifier either predicts a random class or a constant class for all the data points.\n",
    "\n",
    "So, the higher the AUC value for a classifier, the better its ability to distinguish between positive and negative classes.\n",
    "\n",
    "How Does the AUC-ROC Curve Work? In a ROC curve, a higher X-axis value indicates a higher number of False positives than True negatives. While a higher Y-axis value indicates a higher number of True positives than False negatives. So, the choice of the threshold depends on the ability to balance False positives and False negatives.\n",
    "\n",
    "Let’s dig a bit deeper and understand what our ROC curve would look like for different threshold values and how the specificity and sensitivity would vary.\n",
    "\n",
    "We can try and understand this graph by generating a confusion matrix for each point corresponding to a threshold and talk about the performance of our classifier:\n",
    "\n",
    "Point A: This is where the Sensitivity is the highest and Specificity the lowest. This means all the Positive class points are classified correctly, and all the Negative class points are classified incorrectly. In fact, any point on the blue line corresponds to a situation where the True Positive Rate is equal to False Positive Rate. All points above this line correspond to the situation where the proportion of correctly classified points belonging to the Positive class is greater than the proportion of incorrectly classified points belonging to the Negative class.\n",
    "\n",
    "Point B: Although Point B has the same Sensitivity as Point A, it has a higher Specificity. Meaning the number of incorrectly Negative class points is lower than the previous threshold. This indicates that this threshold is better than the previous one.\n",
    "\n",
    "Between points C and D: The Sensitivity at point C is higher than point D for the same Specificity. This means, for the same number of incorrectly classified Negative class points, the classifier predicted a higher number of Positive class points. Therefore, the threshold at point C is better than point D.\n",
    "\n",
    "Now, depending on how many incorrectly classified points we want to tolerate for our classifier, we would choose between point B or C to predict whether you can defeat me in PUBG or not.\n",
    "\n",
    "“False hopes are more dangerous than fears.”–J.R.R. Tolkein\n",
    "\n",
    "Point E: This is where the Specificity becomes highest. Meaning the model classifies no False Positives. The model can correctly classify all the Negative class points! We would choose this point if our problem was to give perfect song recommendations to our users.\n",
    "\n",
    "Going by this logic, can you guess where the point corresponding to a perfect classifier would lie on the graph?\n",
    "\n",
    "Yes! It would be on the top-left corner of the ROC graph corresponding to the coordinate (0, 1) in the cartesian plane. Here, both the Sensitivity and Specificity would be the highest, and the classifier would correctly classify all the Positive and Negative class points."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7e500625-1d67-4ef4-8058-b5a7727c1ba9",
   "metadata": {
    "id": "7e500625-1d67-4ef4-8058-b5a7727c1ba9"
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "colab": {
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
